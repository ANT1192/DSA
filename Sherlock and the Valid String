string isValid(string s) {
    
    map<char, int> charFreq;
    
    // Step 1: Calculate the frequency of each character
    for (char c : s) {
        charFreq[c]++;
    }

    // Step 2: Calculate the frequency of frequencies
    map<int, int> freqMap;
    for (auto it : charFreq) {
        freqMap[it.second]++;
    }

    // Step 3: Analyze the frequency map
    if (freqMap.size() == 1) {
        // Case 1: All characters have the same frequency
        return "YES";
    }
    
    if (freqMap.size() == 2) {
        auto it1 = freqMap.begin();
        auto it2 = next(it1);
        
        // Case 2: Check if one frequency is 1 and occurs exactly once, or
        // the difference between two frequencies is 1, and the larger occurs exactly once.
        if ((it1->first == 1 && it1->second == 1) ||
            (it2->first == 1 && it2->second == 1)) {
            return "YES";
        }
        
        if ((abs(it1->first - it2->first) == 1) && (it1->second == 1 || it2->second == 1)) {
            return "YES";
        }
    }
    
    // Otherwise, it is not possible to make the string valid
    return "NO";

}


Step 1: Count the frequencies of characters using an array of size 26.
Step 2: Count the frequency of frequencies using a map (or array if the range is small).
Step 3: Analyze the frequency of frequencies (similar logic as before).]


bool isValidString(string s) {
    vector<int> charFreq(26, 0);  // Step 1: Count character frequencies
    
    for (char c : s) {
        charFreq[c - 'a']++;
    }
    
    map<int, int> freqMap;  // Step 2: Count how often each frequency occurs
    for (int freq : charFreq) {
        if (freq > 0) {
            freqMap[freq]++;
        }
    }
    
    // Step 3: Analyze the frequency map
    if (freqMap.size() == 1) {
        return true;  // All characters have the same frequency
    }
    
    if (freqMap.size() == 2) {
        auto it1 = freqMap.begin();
        auto it2 = next(it1);
        
        // Check if one frequency is 1 and occurs exactly once
        if (it1->first == 1 && it1->second == 1) {
            return true;  // Case where we can remove the character with frequency 1
        }
        
        // Check if the difference between the two frequencies is 1, and the larger frequency occurs only once
        if (abs(it1->first - it2->first) == 1 && (it1->second == 1 || it2->second == 1)) {
            return true;  // Case where we can remove one occurrence of the higher frequency
        }
    }
    
    return false;  // More than 2 different frequencies or can't remove just one character
}
